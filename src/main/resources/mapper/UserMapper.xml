<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
    注意：使用mapper代理方法开发，namespace有特殊重要作用
-->
<mapper namespace="com.xt.mybatis.mapper.UserMapper">

    <!--开启本mapper的namespace下的二级缓存
        type: 指定cache接口的实现类的类型，mybatis默认使用perpetualCache
        要和ehcache整合，需要配置type为ehcache实现cache接口的类型org.mybatis.caches.ehcache.EhcacheCache
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
    <!--定义sql片段
        id：sql片段的唯一标识

        经验：是基于单表来定义sql片段，这样话这个sql片段可重用才高
        在sql片段中不要包括where
     -->
    <sql id="query_user_where">
        <if test="null != userCustomer">
            <if test="null != userCustomer.sex and '' != userCustomer.sex">
                and sex=#{userCustomer.sex}
            </if>
            <if test="null != userCustomer.username and '' != userCustomer.username">
                and username LIKE '%${userCustomer.username}%'
            </if>
        </if>
    </sql>
    <!--定义resultMap
        将SELECT id id_, username username_ FROM USER 和 User类中的属性作一个映射关系

        type：resultMap最终映射的Java对象类型，可以使用别名
        id：对resultMap的唯一标识
     -->
    <resultMap id="userResultMap" type="User">
        <!--id：表示查询结果集中唯一标识
            column：查询出来的列名
            property：type指定的pojo类型中的属性名
            最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <id column="id_" property="id"/>
        <!--result：对普通名映射定义
            column：查询出来的列名
            property：type指定的pojo类型中的属性名
            最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <result column="username_" property="username"/>
    </resultMap>

    <!-- 在映射文件中配置很多sql语句-->
    <!-- 需求：通过id查找用户表的记录-->
    <!-- 通过select执行数据库查询
    id: 标识映射文件中的sql，将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType:指定输入参数的类型，这里指定为int型
    #{}表示一个占位符号
    #{id}：其中的id表示接受输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其它名称
    resultType：指定sql输出结果所映射的Java对象类型，select指定resultType表示将单条记录映射成的Java对象。-->
    <select id="findUserById" parameterType="int" resultType="user">
    <!--<select id="findUserById" parameterType="int" resultType="user" useCache="false">-->
        SELECT * FROM USER WHERE id = #{id}
    </select>

    <!--使用resultMap进行输出映射
        resultMap：指定定义的resultMap的id，如果这个resultMap在其他的mapper文件，
                    前边需要加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_, username username_ FROM USER WHERE id = #{value}
    </select>

    <select id="findAll" resultType="com.xt.mybatis.domain.User">
        SELECT * FROM USER
    </select>

    <!--这个方式 那个返回值1并不是主键，而是插入数据库的记录的条数
                 该条记录的主键通过user.getId();即可获取
        根据用户名称模糊查询用户信息，可能返回多条记录
        resultType:指定的就是单条记录所映射的Java对象
        ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
        使用${}拼接sql，引起sql注入
        ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.xt.mybatis.domain.User">
        SELECT * FROM USER WHERE username LIKE '%${value}%'
    </select>

    <!--添加用户
        parameterType：指定输入参数类型是pojo（包括用户信息）
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="com.xt.mybatis.domain.User" flushCache="true">
        <!-- 将插入数据的主键返回，返回到user对象中
            SELECT LAST_INSERT_ID() : 得到刚insert进去记录的主键值，只适用于自增主键

            keyProperty：将查询到主键值设置到parameterType指定对象的那个属性
            order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType：指定SELECT LAST_INSERT_ID() 的结果类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER(username, birthday, sex, address) VALUE(#{username}, #{birthday}, #{sex}, #{address})
    </insert>
    <!--<insert id="insertUser" parameterType="com.xt.mybatis.domain.User" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO USER(username, birthday, sex, address) VALUE(#{username}, #{birthday}, #{sex}, #{address})
    </insert>-->

    <!--根据用户ID删除用户信息-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!--根据用户ID更新用户信息-->
    <update id="updateUser" parameterType="com.xt.mybatis.domain.User">
        UPDATE USER SET username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} where id=#{id}
    </update>

    <!--用户信息综合查询-->
    <select id="findUserList" parameterType="UserQueryVo" resultType="UserCustomer">
       <!--SELECT * FROM USER WHERE sex=#{userCustomer.sex} AND username LIKE '%${userCustomer.username}%'-->
       SELECT * FROM USER
        <!--where 自动去掉查询条件中的第一个and -->
       <where>
           <!-- 引用sql片段的id，如果refid指的的id不在本namespace中，需要前边加namespace -->
           <include refid="query_user_where"></include>
           <!--在这里还要引用其他的sql片段 -->
        </where>
    </select>

<!--用户信息综合查询条数-->
    <select id="findUserCount" parameterType="UserQueryVo" resultType="int">
        <!--SELECT COUNT(*) FROM USER WHERE sex=#{userCustomer.sex} AND username LIKE '%${userCustomer.username}%'-->
        SELECT COUNT(*) FROM USER
        <where>
            <!-- 引用sql片段的id，如果refid指的的id不在本namespace中，需要前边加namespace -->
            <include refid="query_user_where"></include>
        </where>
    </select>
<!--foreach
    1) SELECT * FROM USER WHERE id=1 OR id=10 OR id=16-->
    <sql id="query_user_for1">
        <!-- 使用foreach遍历传入ids
            collection: 指定输入对象中集合属性
            item：每个遍历生成对象
            open：开始遍历是拼接的串
            close：结束遍历时拼接的串
            separator：遍历时两个对象需要拼接的串
         -->
        <if test="null != ids">
            <foreach collection="ids" item="user_id" open=" and (" close=")" separator="or">
                id=#{user_id}
            </foreach>
        </if>
    </sql>

    <!--SELECT * FROM USER WHERE id IN(1,10,16)-->
    <sql id="query_user_for2">
        <foreach collection="ids" item="user_id" open="and id in (" close=")" separator=",">
            #{user_id}
        </foreach>
    </sql>
    <select id="findUserList1" parameterType="UserQueryVo" resultType="UserCustomer">
        SELECT * from USER
        <where>
            <include refid="query_user_where"/>
            <include refid="query_user_for2"/>
        </where>
    </select>

</mapper>