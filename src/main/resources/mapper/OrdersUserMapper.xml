<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
    注意：使用mapper代理方法开发，namespace有特殊重要作用
-->
<mapper namespace="com.xt.mybatis.mapper.OrdersUserMapper">

    <!--订单查询关联用户的resultMap
        将整个查询的结果映射到Orders中
    -->
    <resultMap id="orderUserResultMap" type="Orders">
        <!--配置映射的订单信息
            id：指定查询列中的唯一标识，订单信息中的唯一标识，
                如果有多个列组成唯一标识，配置多个id
            column：订单信息的唯一标识 列
            property：订单信息的唯一标识 列所映射到Orders中的那个属性
        -->
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createTime"/>
        <result column="note" property="note"/>

        <!--配置映射的关联用户信息-->
        <!--association：用于映射关联查询单个对象的信息
            property：要将关联查询的用户信息映射到Orders中的哪个属性
        -->
        <association property="user" javaType="User">
            <!--id：关联查询用户的唯一标识
                column：指定唯一标识用户信息的列
                javaType：映射到user的哪个属性
            -->
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>

    <!--查询订单关联用户和订单明细查询
        使用extends继承，不用在配置订单信息和用户信息的映射
    -->
    <resultMap id="orderANDOrderDetailResultMap" type="Orders" extends="orderUserResultMap">
        <!--订单明细信息
            一个订单关联查询出了多条明细，要使用collection进行映射
            collection：对关联查询到多条记录映射到集合对象中
            property：将关联查询到多条记录映射到Orders哪个属性
            ofType：指定映射到list集合属性中pojo的类型
        -->
        <collection property="orderDetails" ofType="OrderDetail">
            <id column="orderdetail_id" property="id"/>
            <result column="orders_id" property="ordersId"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
        </collection>
    </resultMap>

    <!--查询用户和商品信息-->
    <resultMap id="userAndItemsResultMap" type="User">
        <!--配置用户信息-->
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
        <!--配置订单信息-->
        <collection property="orderList" ofType="Orders">
            <id column="id" property="id"></id>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createTime"/>
            <result column="note" property="note"/>
            
            <!--配置订单明细-->
            <collection property="orderDetails" ofType="OrderDetail">
                <id column="orderdetail_id" property="id"/>
                <result column="orders_id" property="ordersId"/>
                <result column="items_id" property="itemsId"/>
                <result column="items_num" property="itemsNum"/>
                
                <!--配置商品-->
                <association property="items" javaType="Items">
                    <id column="items_id" property="id"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_name" property="name"/>
                    <result column="items_price" property="price"/>
                </association>
            </collection>
        </collection>
    </resultMap>

    <select id="findOrdersUser" resultType="OrdersCustomer">
        SELECT orders.*, user.username, user.sex, user.address FROM orders, USER WHERE orders.user_id = user.id
    </select>

    <select id="findOrderUserResultMap" resultMap="orderUserResultMap">
        SELECT orders.*, user.username, user.sex, user.address FROM orders, USER WHERE orders.user_id = user.id
    </select>

    <select id="findOrderANDOrderDetailResultMap" resultMap="orderANDOrderDetailResultMap">
       SELECT orders.*, user.username, user.sex, user.address,
               orderdetail.id orderdetail_id, orderdetail.orders_id, orderdetail.items_id, orderdetail.items_num
       FROM orders, USER, orderdetail
       WHERE orders.user_id = user.id AND orders.id = orderdetail.orders_id
    </select>

    <select id="findUserAndItemsResultMap" resultMap="userAndItemsResultMap">
       SELECT orders.*, user.username, user.sex, user.address,
               orderdetail.id orderdetail_id, orderdetail.orders_id, orderdetail.items_id, orderdetail.items_num,
               items.name items_name, items.price items_price, items.detail items_detail
       FROM orders, USER, orderdetail, items
       WHERE orders.user_id = user.id AND orders.id = orderdetail.orders_id AND orderdetail.items_id = items.id
    </select>

    <resultMap id="OrderUserLazyLoading" type="Orders">
        <!--配置订单信息-->
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createTime"/>
        <result column="note" property="note"/>

        <!--实现对用户信息进行延迟加载
            select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
            要使用userMapper.xml中findUserById完成根据用户id（user_id）用户信息的查询，
            如果findUserById不在本mapper中需要前边加namespace
            关联查询的sql理解为：
            SELECT orders.*,
                   (SELECT user.username FROM USER WHERE user.id=orders.user_id) username,
                   (SELECT user.sex FROM USER WHERE user.id=orders.user_id) sex
            FROM orders
        -->
        <association property="user" javaType="User"
                     select="com.xt.mybatis.mapper.UserMapper.findUserById"
                     column="user_id">
        </association>
    </resultMap>
    <!--查询订单，延迟查询用户-->
    <select id="findOrderUserLazyLoading" resultMap="OrderUserLazyLoading">
        SELECT * FROM orders
    </select>
</mapper>